[
    {
        "label": "game",
        "type": "Class",
        "description": "The global game object.",
        "insertText": "game"
    },
    {
        "label": "workspace",
        "type": "Class",
        "description": "The global workspace object.",
        "insertText": "workspace"
    },
    {
        "label": "Instance.new",
        "type": "Function",
        "description": "Creates a new instance of a Roblox object.",
        "insertText": "Instance.new(${1:className})"
    },
    {
        "label": "print",
        "type": "Function",
        "description": "Outputs text to the console.",
        "insertText": "print(${1:Text})"
    },
    {
        "label": "warn",
        "type": "Function",
        "description": "Outputs a warning message to the console.",
        "insertText": "warn(${1:Warning})"
    },
    {
        "label": "wait",
        "type": "Function",
        "description": "Yields the current thread for a specified number of seconds.",
        "insertText": "wait(${1:seconds})"
    },
    {
        "label": "info",
        "type": "Function",
        "description": "Outputs an informational message to the console.",
        "insertText": "info(${1:Information})"
    },
    {
        "label": "printidentity",
        "type": "Function",
        "description": "Prints the identity of an object to the console.",
        "insertText": "printidentity(${1:Object})"
    },
    {
        "label": "assert",
        "type": "Function",
        "description": "Checks if a condition is true; if not, raises an error.",
        "insertText": "assert(${1:condition}, ${2:message})"
    },
    {
        "label": "collectgarbage",
        "type": "Function",
        "description": "Controls Lua's garbage collection.",
        "insertText": "collectgarbage(${1:option})"
    },
    {
        "label": "error",
        "type": "Function",
        "description": "Raises an error.",
        "insertText": "error(${1:message})"
    },
    {
        "label": "getfenv",
        "type": "Function",
        "description": "Gets the environment of a function.",
        "insertText": "getfenv(${1:function})"
    },
    {
        "label": "getgenv",
        "type": "Function",
        "description": "Gets the global environment.",
        "insertText": "getgenv()"
    },
    {
        "label": "getmetatable",
        "type": "Function",
        "description": "Gets the metatable of an object.",
        "insertText": "getmetatable(${1:object})"
    },
    {
        "label": "setmetatable",
        "type": "Function",
        "description": "Sets the metatable of an object.",
        "insertText": "setmetatable(${1:object}, ${2:metatable})"
    },
    {
        "label": "ipairs",
        "type": "Function",
        "description": "Iterates over an array-like table.",
        "insertText": "ipairs(${1:table})"
    },
    {
        "label": "loadfile",
        "type": "Function",
        "description": "Loads and compiles a Lua file.",
        "insertText": "loadfile(${1:filename})"
    },
    {
        "label": "loadstring",
        "type": "Function",
        "description": "Loads and compiles a string as Lua code.",
        "insertText": "loadstring(${1:code})"
    },
    {
        "label": "newproxy",
        "type": "Function",
        "description": "Creates a new userdata object with a unique metatable.",
        "insertText": "newproxy()"
    },
    {
        "label": "next",
        "type": "Function",
        "description": "Returns the next key-value pair from a table.",
        "insertText": "next(${1:table}, ${2:index})"
    },
    {
        "label": "pairs",
        "type": "Function",
        "description": "Iterates over all key-value pairs in a table.",
        "insertText": "pairs(${1:table})"
    },
    {
        "label": "pcall",
        "type": "Function",
        "description": "Calls a function in protected mode.",
        "insertText": "pcall(${1:function}, ${2:args})"
    },
    {
        "label": "spawn",
        "type": "Function",
        "description": "Runs a function on a separate thread.",
        "insertText": "spawn(${1:function})"
    },
    {
        "label": "rawequal",
        "type": "Function",
        "description": "Checks if two values are identical without invoking their metamethods.",
        "insertText": "rawequal(${1:v1}, ${2:v2})"
    },
    {
        "label": "rawget",
        "type": "Function",
        "description": "Gets a value from a table without invoking its metamethods.",
        "insertText": "rawget(${1:table}, ${2:index})"
    },
    {
        "label": "rawset",
        "type": "Function",
        "description": "Sets a value in a table without invoking its metamethods.",
        "insertText": "rawset(${1:table}, ${2:index}, ${3:value})"
    },
    {
        "label": "select",
        "type": "Function",
        "description": "Returns its arguments starting from the given index.",
        "insertText": "select(${1:index}, ${2:...})"
    },
    {
        "label": "tonumber",
        "type": "Function",
        "description": "Converts a value to a number.",
        "insertText": "tonumber(${1:value})"
    },
    {
        "label": "tostring",
        "type": "Function",
        "description": "Converts a value to a string.",
        "insertText": "tostring(${1:value})"
    },
    {
        "label": "type",
        "type": "Function",
        "description": "Returns the type of a value.",
        "insertText": "type(${1:value})"
    },
    {
        "label": "unpack",
        "type": "Function",
        "description": "Returns all elements from a table.",
        "insertText": "unpack(${1:table})"
    },
    {
        "label": "xpcall",
        "type": "Function",
        "description": "Calls a function in protected mode with custom error handling.",
        "insertText": "xpcall(${1:function}, ${2:errorHandler})"
    },
    {
        "label": "delay",
        "type": "Function",
        "description": "Runs a function after a delay.",
        "insertText": "delay(${1:seconds}, ${2:function})"
    },
    {
        "label": "stats",
        "type": "Function",
        "description": "Returns statistics about Lua's memory usage.",
        "insertText": "stats()"
    },
    {
        "label": ":Remove()",
        "type": "Method",
        "description": "Removes the object from the game.",
        "insertText": ":Remove()"
    },
    {
        "label": ":BreakJoints()",
        "type": "Method",
        "description": "Breaks all joints connected to the object.",
        "insertText": ":BreakJoints()"
    },
    {
        "label": ":GetChildren()",
        "type": "Method",
        "description": "Returns a table containing all the children of the object.",
        "insertText": ":GetChildren()"
    },
    {
        "label": ":FindFirstChild()",
        "type": "Method",
        "description": "Returns the first child of the object with the given name.",
        "insertText": ":FindFirstChild(${1:name})"
    },
    {
        "label": ":FireServer()",
        "type": "Method",
        "description": "Sends a remote event to the server.",
        "insertText": ":FireServer()"
    },
    {
        "label": ":InvokeServer()",
        "type": "Method",
        "description": "Invokes a remote function on the server.",
        "insertText": ":InvokeServer()"
    },
    {
        "label": ":ClearAllChildren()",
        "type": "Method",
        "description": "Removes all children of the object.",
        "insertText": ":ClearAllChildren()"
    },
    {
        "label": ":Clone()",
        "type": "Method",
        "description": "Creates a copy of the object and its descendants.",
        "insertText": ":Clone()"
    },
    {
        "label": ":Destroy()",
        "type": "Method",
        "description": "Removes the object and its descendants from the game.",
        "insertText": ":Destroy()"
    },
    {
        "label": ":FindFirstAncestor()",
        "type": "Method",
        "description": "Returns the nearest ancestor of the object.",
        "insertText": ":FindFirstAncestor(${1:name})"
    },
    {
        "label": ":FindFirstAncestorOfClass()",
        "type": "Method",
        "description": "Returns the nearest ancestor of the object with the given class.",
        "insertText": ":FindFirstAncestorOfClass(${1:className})"
    },
    {
        "label": ":FindFirstAncestorWhichIsA()",
        "type": "Method",
        "description": "Returns the nearest ancestor of the object which is a subclass of the given class.",
        "insertText": ":FindFirstAncestorWhichIsA(${1:className})"
    },
    {
        "label": ":FindFirstChildOfClass()",
        "type": "Method",
        "description": "Returns the first child of the object with the given class.",
        "insertText": ":FindFirstChildOfClass(${1:className})"
    },
    {
        "label": ":FindFirstChildWhichIsA()",
        "type": "Method",
        "description": "Returns the first child of the object which is a subclass of the given class.",
        "insertText": ":FindFirstChildWhichIsA(${1:className})"
    },
    {
        "label": ":GetDebugId()",
        "type": "Method",
        "description": "Returns a unique identifier for the object.",
        "insertText": ":GetDebugId()"
    },
    {
        "label": ":GetDescendants()",
        "type": "Method",
        "description": "Returns a table containing all descendants of the object.",
        "insertText": ":GetDescendants()"
    },
    {
        "label": ":GetFullName()",
        "type": "Method",
        "description": "Returns the full hierarchical name of the object.",
        "insertText": ":GetFullName()"
    },
    {
        "label": ":IsA()",
        "type": "Method",
        "description": "Checks if the object is a subclass of the given class.",
        "insertText": ":IsA(${1:className})"
    },
    {
        "label": ":GetPropertyChangedSignal()",
        "type": "Method",
        "description": "Returns an event that fires when a property of the object changes.",
        "insertText": ":GetPropertyChangedSignal(${1:propertyName})"
    },
    {
        "label": ":IsAncestorOf()",
        "type": "Method",
        "description": "Checks if the object is an ancestor of another object.",
        "insertText": ":IsAncestorOf(${1:object})"
    },
    {
        "label": ":IsDescendantOf()",
        "type": "Method",
        "description": "Checks if the object is a descendant of another object.",
        "insertText": ":IsDescendantOf(${1:object})"
    },
    {
        "label": ":WaitForChild()",
        "type": "Method",
        "description": "Yields the current thread until a child with the given name appears.",
        "insertText": ":WaitForChild(${1:name})"
    },
    {
        "label": ":Connect()",
        "type": "Method",
        "description": "Connects a function to an event.",
        "insertText": ":Connect(${1:function})"
    },
    {
        "label": ":AncestryChanged()",
        "type": "Method",
        "description": "Returns an event that fires when the object's ancestry changes.",
        "insertText": ":AncestryChanged(${1:handler})"
    },
    {
        "label": ":Changed()",
        "type": "Method",
        "description": "Returns an event that fires when a property of the object changes.",
        "insertText": ":Changed(${1:propertyName}, ${2:handler})"
    },
    {
        "label": ":ChildAdded()",
        "type": "Method",
        "description": "Returns an event that fires when a child is added to the object.",
        "insertText": ":ChildAdded(${1:handler})"
    },
    {
        "label": ":ChildRemoved()",
        "type": "Method",
        "description": "Returns an event that fires when a child is removed from the object.",
        "insertText": ":ChildRemoved(${1:handler})"
    },
    {
        "label": ":DescendantAdded()",
        "type": "Method",
        "description": "Returns an event that fires when a descendant is added to the object.",
        "insertText": ":DescendantAdded(${1:handler})"
    },
    {
        "label": ":DescendantRemoving()",
        "type": "Method",
        "description": "Returns an event that fires when a descendant is about to be removed from the object.",
        "insertText": ":DescendantRemoving(${1:handler})"
    },
    {
        "label": ":GetService()",
        "type": "Method",
        "description": "Returns the service associated with the object.",
        "insertText": ":GetService()"
    },
    {
        "label": ":GetObjects()",
        "type": "Method",
        "description": "Returns an array containing all descendants of the object that match the given tags.",
        "insertText": ":GetObjects(${1:tags})"
    },
    {
        "label": ":HttpGet()",
        "type": "Method",
        "description": "Sends an HTTP GET request.",
        "insertText": ":HttpGet(${1:url})"
    },
    {
        "label": ":Wait()",
        "type": "Method",
        "description": "Yields the current thread until the object is destroyed.",
        "insertText": ":Wait()"
    }
]
